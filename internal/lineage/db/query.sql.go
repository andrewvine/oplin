// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const createDataset = `-- name: CreateDataset :one
insert into lineage.datasets (
  namespace_id,
  name,
  facets,
  created_at
) values (
  $1, $2, $3, $4
)
returning id, current_version_id, namespace_id, name, facets, created_at, updated_at
`

type CreateDatasetParams struct {
	NamespaceID int64
	Name        string
	Facets      pqtype.NullRawMessage
	CreatedAt   time.Time
}

func (q *Queries) CreateDataset(ctx context.Context, arg CreateDatasetParams) (LineageDataset, error) {
	row := q.db.QueryRowContext(ctx, createDataset,
		arg.NamespaceID,
		arg.Name,
		arg.Facets,
		arg.CreatedAt,
	)
	var i LineageDataset
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDatasetNamespace = `-- name: CreateDatasetNamespace :one
insert into lineage.dataset_namespaces (
  name,
  created_at
) values (
  $1, $2
)
returning id, name, created_at, updated_at
`

type CreateDatasetNamespaceParams struct {
	Name      string
	CreatedAt time.Time
}

func (q *Queries) CreateDatasetNamespace(ctx context.Context, arg CreateDatasetNamespaceParams) (LineageDatasetNamespace, error) {
	row := q.db.QueryRowContext(ctx, createDatasetNamespace, arg.Name, arg.CreatedAt)
	var i LineageDatasetNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDatasetVersion = `-- name: CreateDatasetVersion :one
insert into lineage.dataset_versions (
  dataset_id,
  namespace_id,
  name,
  created_at
) values (
  $1, $2, $3, $4
)
returning id, dataset_id, namespace_id, name, created_at, updated_at
`

type CreateDatasetVersionParams struct {
	DatasetID   int64
	NamespaceID int64
	Name        string
	CreatedAt   time.Time
}

func (q *Queries) CreateDatasetVersion(ctx context.Context, arg CreateDatasetVersionParams) (LineageDatasetVersion, error) {
	row := q.db.QueryRowContext(ctx, createDatasetVersion,
		arg.DatasetID,
		arg.NamespaceID,
		arg.Name,
		arg.CreatedAt,
	)
	var i LineageDatasetVersion
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.NamespaceID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createField = `-- name: CreateField :one
insert into lineage.fields (
  dataset_version_id,
  name,
  data_type,
  description,
  updated_at,
  created_at
) values (
  $1, $2, $3, $4, $5, $6
)
returning id, dataset_version_id, name, data_type, description, created_at, updated_at
`

type CreateFieldParams struct {
	DatasetVersionID int64
	Name             string
	DataType         string
	Description      sql.NullString
	UpdatedAt        sql.NullTime
	CreatedAt        time.Time
}

func (q *Queries) CreateField(ctx context.Context, arg CreateFieldParams) (LineageField, error) {
	row := q.db.QueryRowContext(ctx, createField,
		arg.DatasetVersionID,
		arg.Name,
		arg.DataType,
		arg.Description,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i LineageField
	err := row.Scan(
		&i.ID,
		&i.DatasetVersionID,
		&i.Name,
		&i.DataType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createJob = `-- name: CreateJob :one
insert into lineage.jobs (
  namespace_id,
  name,
  facets,
  created_at
) values (
  $1, $2, $3, $4
)
returning id, current_version_id, namespace_id, name, facets, created_at, updated_at
`

type CreateJobParams struct {
	NamespaceID int64
	Name        string
	Facets      pqtype.NullRawMessage
	CreatedAt   time.Time
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (LineageJob, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.NamespaceID,
		arg.Name,
		arg.Facets,
		arg.CreatedAt,
	)
	var i LineageJob
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createJobNamespace = `-- name: CreateJobNamespace :one
insert into lineage.job_namespaces (
  name,
  created_at
) values (
  $1, $2
)
returning id, name, created_at, updated_at
`

type CreateJobNamespaceParams struct {
	Name      string
	CreatedAt time.Time
}

func (q *Queries) CreateJobNamespace(ctx context.Context, arg CreateJobNamespaceParams) (LineageJobNamespace, error) {
	row := q.db.QueryRowContext(ctx, createJobNamespace, arg.Name, arg.CreatedAt)
	var i LineageJobNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createJobVersion = `-- name: CreateJobVersion :one
insert into lineage.job_versions (
  job_id,
  namespace_id,
  name,
  facets,
  created_at
) values (
  $1, $2, $3, $4, $5
)
returning id, job_id, namespace_id, name, facets, created_at, updated_at
`

type CreateJobVersionParams struct {
	JobID       int64
	NamespaceID int64
	Name        string
	Facets      pqtype.NullRawMessage
	CreatedAt   time.Time
}

func (q *Queries) CreateJobVersion(ctx context.Context, arg CreateJobVersionParams) (LineageJobVersion, error) {
	row := q.db.QueryRowContext(ctx, createJobVersion,
		arg.JobID,
		arg.NamespaceID,
		arg.Name,
		arg.Facets,
		arg.CreatedAt,
	)
	var i LineageJobVersion
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createLifecycleStateChange = `-- name: CreateLifecycleStateChange :one
insert into lineage.lifecycle_state_changes (
  dataset_id,
  namespace,
  name,
  data_type,
  change,
  updated_at,
  created_at
) values (
  $1, $2, $3, $4, $5, $6, $7
)
returning id, dataset_id, change, namespace, name, data_type, created_at, updated_at
`

type CreateLifecycleStateChangeParams struct {
	DatasetID int64
	Namespace sql.NullString
	Name      sql.NullString
	DataType  string
	Change    sql.NullString
	UpdatedAt sql.NullTime
	CreatedAt time.Time
}

func (q *Queries) CreateLifecycleStateChange(ctx context.Context, arg CreateLifecycleStateChangeParams) (LineageLifecycleStateChange, error) {
	row := q.db.QueryRowContext(ctx, createLifecycleStateChange,
		arg.DatasetID,
		arg.Namespace,
		arg.Name,
		arg.DataType,
		arg.Change,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i LineageLifecycleStateChange
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.Change,
		&i.Namespace,
		&i.Name,
		&i.DataType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRequest = `-- name: CreateRequest :one
INSERT INTO lineage.requests (
  payload,
  created_at
) VALUES (
  $1, $2
)
RETURNING id, payload, created_at
`

type CreateRequestParams struct {
	Payload   json.RawMessage
	CreatedAt time.Time
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (LineageRequest, error) {
	row := q.db.QueryRowContext(ctx, createRequest, arg.Payload, arg.CreatedAt)
	var i LineageRequest
	err := row.Scan(&i.ID, &i.Payload, &i.CreatedAt)
	return i, err
}

const createRun = `-- name: CreateRun :one
INSERT INTO lineage.runs (
  run_uuid,
  job_version_id,
  facets,
  parent_run_id,
  started_at,
  ended_at,
  nominal_started_at,
  nominal_ended_at,
  error_message,
  programming_language,
  stacktrace,
  created_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at
`

type CreateRunParams struct {
	RunUuid             uuid.UUID
	JobVersionID        int64
	Facets              pqtype.NullRawMessage
	ParentRunID         sql.NullInt64
	StartedAt           sql.NullTime
	EndedAt             sql.NullTime
	NominalStartedAt    sql.NullTime
	NominalEndedAt      sql.NullTime
	ErrorMessage        sql.NullString
	ProgrammingLanguage sql.NullString
	Stacktrace          sql.NullString
	CreatedAt           time.Time
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) (LineageRun, error) {
	row := q.db.QueryRowContext(ctx, createRun,
		arg.RunUuid,
		arg.JobVersionID,
		arg.Facets,
		arg.ParentRunID,
		arg.StartedAt,
		arg.EndedAt,
		arg.NominalStartedAt,
		arg.NominalEndedAt,
		arg.ErrorMessage,
		arg.ProgrammingLanguage,
		arg.Stacktrace,
		arg.CreatedAt,
	)
	var i LineageRun
	err := row.Scan(
		&i.ID,
		&i.RunUuid,
		&i.JobVersionID,
		&i.ParentRunID,
		&i.LastEventType,
		&i.Facets,
		&i.StartedAt,
		&i.EndedAt,
		&i.NominalStartedAt,
		&i.NominalEndedAt,
		&i.ErrorMessage,
		&i.ProgrammingLanguage,
		&i.Stacktrace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRunDatasetVersion = `-- name: CreateRunDatasetVersion :one
insert into lineage.run_dataset_versions (
  run_id,
  dataset_version_id,
  io_type,
  dataset_facets,
  io_facets,
  created_at
) values (
  $1, $2, $3, $4, $5, $6
)
returning run_id, dataset_version_id, io_type, dataset_facets, io_facets, created_at
`

type CreateRunDatasetVersionParams struct {
	RunID            int64
	DatasetVersionID int64
	IoType           int32
	DatasetFacets    pqtype.NullRawMessage
	IoFacets         pqtype.NullRawMessage
	CreatedAt        time.Time
}

func (q *Queries) CreateRunDatasetVersion(ctx context.Context, arg CreateRunDatasetVersionParams) (LineageRunDatasetVersion, error) {
	row := q.db.QueryRowContext(ctx, createRunDatasetVersion,
		arg.RunID,
		arg.DatasetVersionID,
		arg.IoType,
		arg.DatasetFacets,
		arg.IoFacets,
		arg.CreatedAt,
	)
	var i LineageRunDatasetVersion
	err := row.Scan(
		&i.RunID,
		&i.DatasetVersionID,
		&i.IoType,
		&i.DatasetFacets,
		&i.IoFacets,
		&i.CreatedAt,
	)
	return i, err
}

const createRunEvent = `-- name: CreateRunEvent :one
INSERT INTO lineage.run_events (
  run_id,
  event_type,
  event_time,
  facets,
  created_at
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, run_id, event_type, event_time, facets, created_at, updated_at
`

type CreateRunEventParams struct {
	RunID     int64
	EventType int32
	EventTime time.Time
	Facets    pqtype.NullRawMessage
	CreatedAt time.Time
}

func (q *Queries) CreateRunEvent(ctx context.Context, arg CreateRunEventParams) (LineageRunEvent, error) {
	row := q.db.QueryRowContext(ctx, createRunEvent,
		arg.RunID,
		arg.EventType,
		arg.EventTime,
		arg.Facets,
		arg.CreatedAt,
	)
	var i LineageRunEvent
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.EventType,
		&i.EventTime,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetByID = `-- name: GetDatasetByID :one
select id, current_version_id, namespace_id, name, facets, created_at, updated_at from lineage.datasets
where id = $1 limit 1
`

func (q *Queries) GetDatasetByID(ctx context.Context, id int64) (LineageDataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByID, id)
	var i LineageDataset
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetByNamespaceIDAndName = `-- name: GetDatasetByNamespaceIDAndName :one
select id, current_version_id, namespace_id, name, facets, created_at, updated_at from lineage.datasets
where namespace_id = $1 and name = $2 limit 1
`

type GetDatasetByNamespaceIDAndNameParams struct {
	NamespaceID int64
	Name        string
}

func (q *Queries) GetDatasetByNamespaceIDAndName(ctx context.Context, arg GetDatasetByNamespaceIDAndNameParams) (LineageDataset, error) {
	row := q.db.QueryRowContext(ctx, getDatasetByNamespaceIDAndName, arg.NamespaceID, arg.Name)
	var i LineageDataset
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetNamespaceByID = `-- name: GetDatasetNamespaceByID :one
select id, name, created_at, updated_at from lineage.dataset_namespaces
where id = $1 limit 1
`

func (q *Queries) GetDatasetNamespaceByID(ctx context.Context, id int64) (LineageDatasetNamespace, error) {
	row := q.db.QueryRowContext(ctx, getDatasetNamespaceByID, id)
	var i LineageDatasetNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetNamespaceByName = `-- name: GetDatasetNamespaceByName :one
select id, name, created_at, updated_at from lineage.dataset_namespaces
where name = $1 limit 1
`

func (q *Queries) GetDatasetNamespaceByName(ctx context.Context, name string) (LineageDatasetNamespace, error) {
	row := q.db.QueryRowContext(ctx, getDatasetNamespaceByName, name)
	var i LineageDatasetNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetVersionByID = `-- name: GetDatasetVersionByID :one
select id, dataset_id, namespace_id, name, created_at, updated_at from lineage.dataset_versions
where id = $1 limit 1
`

func (q *Queries) GetDatasetVersionByID(ctx context.Context, id int64) (LineageDatasetVersion, error) {
	row := q.db.QueryRowContext(ctx, getDatasetVersionByID, id)
	var i LineageDatasetVersion
	err := row.Scan(
		&i.ID,
		&i.DatasetID,
		&i.NamespaceID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDatasetWithNamespace = `-- name: GetDatasetWithNamespace :one
select 
  d.id, 
  d.current_version_id,
  d.name, 
  d.namespace_id, 
  d.facets,
  d.updated_at,
  d.created_at,
  ns.name as namespace_name,
  ns.updated_at as namespace_updated_at,
  ns.created_at as namespace_created_at
from lineage.datasets d
join lineage.dataset_namespaces ns on ns.id = d.namespace_id
where d.id = $1
`

type GetDatasetWithNamespaceRow struct {
	ID                 int64
	CurrentVersionID   sql.NullInt64
	Name               string
	NamespaceID        int64
	Facets             pqtype.NullRawMessage
	UpdatedAt          sql.NullTime
	CreatedAt          time.Time
	NamespaceName      string
	NamespaceUpdatedAt sql.NullTime
	NamespaceCreatedAt time.Time
}

func (q *Queries) GetDatasetWithNamespace(ctx context.Context, id int64) (GetDatasetWithNamespaceRow, error) {
	row := q.db.QueryRowContext(ctx, getDatasetWithNamespace, id)
	var i GetDatasetWithNamespaceRow
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.Name,
		&i.NamespaceID,
		&i.Facets,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.NamespaceName,
		&i.NamespaceUpdatedAt,
		&i.NamespaceCreatedAt,
	)
	return i, err
}

const getJobByID = `-- name: GetJobByID :one
select id, current_version_id, namespace_id, name, facets, created_at, updated_at from lineage.jobs
where id = $1 limit 1
`

func (q *Queries) GetJobByID(ctx context.Context, id int64) (LineageJob, error) {
	row := q.db.QueryRowContext(ctx, getJobByID, id)
	var i LineageJob
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobByNamespaceIDAndName = `-- name: GetJobByNamespaceIDAndName :one
select id, current_version_id, namespace_id, name, facets, created_at, updated_at from lineage.jobs
where namespace_id = $1 and name = $2 limit 1
`

type GetJobByNamespaceIDAndNameParams struct {
	NamespaceID int64
	Name        string
}

func (q *Queries) GetJobByNamespaceIDAndName(ctx context.Context, arg GetJobByNamespaceIDAndNameParams) (LineageJob, error) {
	row := q.db.QueryRowContext(ctx, getJobByNamespaceIDAndName, arg.NamespaceID, arg.Name)
	var i LineageJob
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobNamespaceByID = `-- name: GetJobNamespaceByID :one
select id, name, created_at, updated_at from lineage.job_namespaces
where id = $1 limit 1
`

func (q *Queries) GetJobNamespaceByID(ctx context.Context, id int64) (LineageJobNamespace, error) {
	row := q.db.QueryRowContext(ctx, getJobNamespaceByID, id)
	var i LineageJobNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobNamespaceByName = `-- name: GetJobNamespaceByName :one
select id, name, created_at, updated_at from lineage.job_namespaces
where name = $1 limit 1
`

func (q *Queries) GetJobNamespaceByName(ctx context.Context, name string) (LineageJobNamespace, error) {
	row := q.db.QueryRowContext(ctx, getJobNamespaceByName, name)
	var i LineageJobNamespace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobVersionByID = `-- name: GetJobVersionByID :one
select id, job_id, namespace_id, name, facets, created_at, updated_at from lineage.job_versions
where id = $1 limit 1
`

func (q *Queries) GetJobVersionByID(ctx context.Context, id int64) (LineageJobVersion, error) {
	row := q.db.QueryRowContext(ctx, getJobVersionByID, id)
	var i LineageJobVersion
	err := row.Scan(
		&i.ID,
		&i.JobID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJobWithNamespace = `-- name: GetJobWithNamespace :one
select 
  j.id, 
  j.current_version_id, 
  j.name, 
  j.namespace_id, 
  j.facets,
  j.updated_at,
  j.created_at,
  ns.name as namespace_name,
  ns.updated_at as namespace_updated_at,
  ns.created_at as namespace_created_at
from lineage.jobs j
join lineage.job_namespaces ns on ns.id = j.namespace_id
where j.id = $1
`

type GetJobWithNamespaceRow struct {
	ID                 int64
	CurrentVersionID   sql.NullInt64
	Name               string
	NamespaceID        int64
	Facets             pqtype.NullRawMessage
	UpdatedAt          sql.NullTime
	CreatedAt          time.Time
	NamespaceName      string
	NamespaceUpdatedAt sql.NullTime
	NamespaceCreatedAt time.Time
}

func (q *Queries) GetJobWithNamespace(ctx context.Context, id int64) (GetJobWithNamespaceRow, error) {
	row := q.db.QueryRowContext(ctx, getJobWithNamespace, id)
	var i GetJobWithNamespaceRow
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.Name,
		&i.NamespaceID,
		&i.Facets,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.NamespaceName,
		&i.NamespaceUpdatedAt,
		&i.NamespaceCreatedAt,
	)
	return i, err
}

const getLatestRunDatasetVersionByDatasetVersionID = `-- name: GetLatestRunDatasetVersionByDatasetVersionID :one
select run_id, dataset_version_id, io_type, dataset_facets, io_facets, created_at from lineage.run_dataset_versions
where dataset_version_id = $1 order by created_at desc limit 1
`

func (q *Queries) GetLatestRunDatasetVersionByDatasetVersionID(ctx context.Context, datasetVersionID int64) (LineageRunDatasetVersion, error) {
	row := q.db.QueryRowContext(ctx, getLatestRunDatasetVersionByDatasetVersionID, datasetVersionID)
	var i LineageRunDatasetVersion
	err := row.Scan(
		&i.RunID,
		&i.DatasetVersionID,
		&i.IoType,
		&i.DatasetFacets,
		&i.IoFacets,
		&i.CreatedAt,
	)
	return i, err
}

const getRunByID = `-- name: GetRunByID :one
select id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at from lineage.runs
where id = $1 limit 1
`

func (q *Queries) GetRunByID(ctx context.Context, id int64) (LineageRun, error) {
	row := q.db.QueryRowContext(ctx, getRunByID, id)
	var i LineageRun
	err := row.Scan(
		&i.ID,
		&i.RunUuid,
		&i.JobVersionID,
		&i.ParentRunID,
		&i.LastEventType,
		&i.Facets,
		&i.StartedAt,
		&i.EndedAt,
		&i.NominalStartedAt,
		&i.NominalEndedAt,
		&i.ErrorMessage,
		&i.ProgrammingLanguage,
		&i.Stacktrace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRunByUUID = `-- name: GetRunByUUID :one
select id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at from lineage.runs
where run_uuid = $1 limit 1
`

func (q *Queries) GetRunByUUID(ctx context.Context, runUuid uuid.UUID) (LineageRun, error) {
	row := q.db.QueryRowContext(ctx, getRunByUUID, runUuid)
	var i LineageRun
	err := row.Scan(
		&i.ID,
		&i.RunUuid,
		&i.JobVersionID,
		&i.ParentRunID,
		&i.LastEventType,
		&i.Facets,
		&i.StartedAt,
		&i.EndedAt,
		&i.NominalStartedAt,
		&i.NominalEndedAt,
		&i.ErrorMessage,
		&i.ProgrammingLanguage,
		&i.Stacktrace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRunDatasetVersionByRunIDAndDatasetVersionID = `-- name: GetRunDatasetVersionByRunIDAndDatasetVersionID :one
select run_id, dataset_version_id, io_type, dataset_facets, io_facets, created_at from lineage.run_dataset_versions
where run_id = $1 and dataset_version_id = $2 limit 1
`

type GetRunDatasetVersionByRunIDAndDatasetVersionIDParams struct {
	RunID            int64
	DatasetVersionID int64
}

func (q *Queries) GetRunDatasetVersionByRunIDAndDatasetVersionID(ctx context.Context, arg GetRunDatasetVersionByRunIDAndDatasetVersionIDParams) (LineageRunDatasetVersion, error) {
	row := q.db.QueryRowContext(ctx, getRunDatasetVersionByRunIDAndDatasetVersionID, arg.RunID, arg.DatasetVersionID)
	var i LineageRunDatasetVersion
	err := row.Scan(
		&i.RunID,
		&i.DatasetVersionID,
		&i.IoType,
		&i.DatasetFacets,
		&i.IoFacets,
		&i.CreatedAt,
	)
	return i, err
}

const getRunEvent = `-- name: GetRunEvent :one
SELECT id, run_id, event_type, event_time, facets, created_at, updated_at FROM lineage.run_events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRunEvent(ctx context.Context, id int64) (LineageRunEvent, error) {
	row := q.db.QueryRowContext(ctx, getRunEvent, id)
	var i LineageRunEvent
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.EventType,
		&i.EventTime,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDatasetNamespaces = `-- name: ListDatasetNamespaces :many
select id, name, created_at, updated_at from lineage.dataset_namespaces
order by name
`

func (q *Queries) ListDatasetNamespaces(ctx context.Context) ([]LineageDatasetNamespace, error) {
	rows, err := q.db.QueryContext(ctx, listDatasetNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageDatasetNamespace
	for rows.Next() {
		var i LineageDatasetNamespace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasetVersionsByDatasetID = `-- name: ListDatasetVersionsByDatasetID :many
select id, dataset_id, namespace_id, name, created_at, updated_at from lineage.dataset_versions
where dataset_id = $1 
order by created_at desc
`

func (q *Queries) ListDatasetVersionsByDatasetID(ctx context.Context, datasetID int64) ([]LineageDatasetVersion, error) {
	rows, err := q.db.QueryContext(ctx, listDatasetVersionsByDatasetID, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageDatasetVersion
	for rows.Next() {
		var i LineageDatasetVersion
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.NamespaceID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasetsWithNamespaces = `-- name: ListDatasetsWithNamespaces :many
select 
  d.id, 
  d.current_version_id,
  d.name, 
  d.namespace_id, 
  d.facets,
  d.updated_at,
  d.created_at,
  ns.name as namespace_name,
  ns.updated_at as namespace_updated_at,
  ns.created_at as namespace_created_at
from lineage.datasets d
join lineage.dataset_namespaces ns on ns.id = d.namespace_id
`

type ListDatasetsWithNamespacesRow struct {
	ID                 int64
	CurrentVersionID   sql.NullInt64
	Name               string
	NamespaceID        int64
	Facets             pqtype.NullRawMessage
	UpdatedAt          sql.NullTime
	CreatedAt          time.Time
	NamespaceName      string
	NamespaceUpdatedAt sql.NullTime
	NamespaceCreatedAt time.Time
}

func (q *Queries) ListDatasetsWithNamespaces(ctx context.Context) ([]ListDatasetsWithNamespacesRow, error) {
	rows, err := q.db.QueryContext(ctx, listDatasetsWithNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasetsWithNamespacesRow
	for rows.Next() {
		var i ListDatasetsWithNamespacesRow
		if err := rows.Scan(
			&i.ID,
			&i.CurrentVersionID,
			&i.Name,
			&i.NamespaceID,
			&i.Facets,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.NamespaceName,
			&i.NamespaceUpdatedAt,
			&i.NamespaceCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFieldsByDatasetVersionID = `-- name: ListFieldsByDatasetVersionID :many
select id, dataset_version_id, name, data_type, description, created_at, updated_at from lineage.fields
where dataset_version_id = $1 order by name
`

func (q *Queries) ListFieldsByDatasetVersionID(ctx context.Context, datasetVersionID int64) ([]LineageField, error) {
	rows, err := q.db.QueryContext(ctx, listFieldsByDatasetVersionID, datasetVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageField
	for rows.Next() {
		var i LineageField
		if err := rows.Scan(
			&i.ID,
			&i.DatasetVersionID,
			&i.Name,
			&i.DataType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobNamespaces = `-- name: ListJobNamespaces :many
select id, name, created_at, updated_at from lineage.job_namespaces
order by name
`

func (q *Queries) ListJobNamespaces(ctx context.Context) ([]LineageJobNamespace, error) {
	rows, err := q.db.QueryContext(ctx, listJobNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageJobNamespace
	for rows.Next() {
		var i LineageJobNamespace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobVersionsByJobID = `-- name: ListJobVersionsByJobID :many
select id, job_id, namespace_id, name, facets, created_at, updated_at from lineage.job_versions
where job_id = $1 
order by created_at desc
`

func (q *Queries) ListJobVersionsByJobID(ctx context.Context, jobID int64) ([]LineageJobVersion, error) {
	rows, err := q.db.QueryContext(ctx, listJobVersionsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageJobVersion
	for rows.Next() {
		var i LineageJobVersion
		if err := rows.Scan(
			&i.ID,
			&i.JobID,
			&i.NamespaceID,
			&i.Name,
			&i.Facets,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobs = `-- name: ListJobs :many
select id, current_version_id, namespace_id, name, facets, created_at, updated_at from lineage.jobs
order by name
`

func (q *Queries) ListJobs(ctx context.Context) ([]LineageJob, error) {
	rows, err := q.db.QueryContext(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageJob
	for rows.Next() {
		var i LineageJob
		if err := rows.Scan(
			&i.ID,
			&i.CurrentVersionID,
			&i.NamespaceID,
			&i.Name,
			&i.Facets,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsWithNamespaces = `-- name: ListJobsWithNamespaces :many
select 
  j.id, 
  j.name, 
  j.namespace_id, 
  j.facets,
  j.updated_at,
  j.created_at,
  ns.name as namespace_name,
  ns.updated_at as namespace_updated_at,
  ns.created_at as namespace_created_at
from lineage.jobs j
join lineage.job_namespaces ns on ns.id = j.namespace_id
`

type ListJobsWithNamespacesRow struct {
	ID                 int64
	Name               string
	NamespaceID        int64
	Facets             pqtype.NullRawMessage
	UpdatedAt          sql.NullTime
	CreatedAt          time.Time
	NamespaceName      string
	NamespaceUpdatedAt sql.NullTime
	NamespaceCreatedAt time.Time
}

func (q *Queries) ListJobsWithNamespaces(ctx context.Context) ([]ListJobsWithNamespacesRow, error) {
	rows, err := q.db.QueryContext(ctx, listJobsWithNamespaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListJobsWithNamespacesRow
	for rows.Next() {
		var i ListJobsWithNamespacesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NamespaceID,
			&i.Facets,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.NamespaceName,
			&i.NamespaceUpdatedAt,
			&i.NamespaceCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLifecycleStateChangesByDatasetID = `-- name: ListLifecycleStateChangesByDatasetID :many
select id, dataset_id, change, namespace, name, data_type, created_at, updated_at from lineage.lifecycle_state_changes
where dataset_id = $1 order by created_at
`

func (q *Queries) ListLifecycleStateChangesByDatasetID(ctx context.Context, datasetID int64) ([]LineageLifecycleStateChange, error) {
	rows, err := q.db.QueryContext(ctx, listLifecycleStateChangesByDatasetID, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageLifecycleStateChange
	for rows.Next() {
		var i LineageLifecycleStateChange
		if err := rows.Scan(
			&i.ID,
			&i.DatasetID,
			&i.Change,
			&i.Namespace,
			&i.Name,
			&i.DataType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRequests = `-- name: ListRequests :many
select id, payload, created_at from lineage.requests
order by created_at
`

func (q *Queries) ListRequests(ctx context.Context) ([]LineageRequest, error) {
	rows, err := q.db.QueryContext(ctx, listRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageRequest
	for rows.Next() {
		var i LineageRequest
		if err := rows.Scan(&i.ID, &i.Payload, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunDatasetVersionsWithRelationshipsByRunID = `-- name: ListRunDatasetVersionsWithRelationshipsByRunID :many
select 
  r.run_id, 
  r.dataset_version_id,
  r.io_type,
  r.dataset_facets,
  r.io_facets,
  r.created_at,
  v.id as version_id, 
  v.dataset_id as version_dataset_id, 
  v.name as version_name, 
  v.namespace_id as version_namespace_id, 
  v.updated_at as version_updated_at,
  v.created_at as version_created_at,
  n.id as namespace_id, 
  n.name as namespace_name,
  n.updated_at as namespace_updated_at,
  n.created_at as namespace_created_at
from lineage.run_dataset_versions r
join lineage.dataset_versions v on v.id = r.dataset_version_id
join lineage.dataset_namespaces n on n.id = v.namespace_id
where r.run_id = $1
`

type ListRunDatasetVersionsWithRelationshipsByRunIDRow struct {
	RunID              int64
	DatasetVersionID   int64
	IoType             int32
	DatasetFacets      pqtype.NullRawMessage
	IoFacets           pqtype.NullRawMessage
	CreatedAt          time.Time
	VersionID          int64
	VersionDatasetID   int64
	VersionName        string
	VersionNamespaceID int64
	VersionUpdatedAt   sql.NullTime
	VersionCreatedAt   time.Time
	NamespaceID        int64
	NamespaceName      string
	NamespaceUpdatedAt sql.NullTime
	NamespaceCreatedAt time.Time
}

func (q *Queries) ListRunDatasetVersionsWithRelationshipsByRunID(ctx context.Context, runID int64) ([]ListRunDatasetVersionsWithRelationshipsByRunIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listRunDatasetVersionsWithRelationshipsByRunID, runID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRunDatasetVersionsWithRelationshipsByRunIDRow
	for rows.Next() {
		var i ListRunDatasetVersionsWithRelationshipsByRunIDRow
		if err := rows.Scan(
			&i.RunID,
			&i.DatasetVersionID,
			&i.IoType,
			&i.DatasetFacets,
			&i.IoFacets,
			&i.CreatedAt,
			&i.VersionID,
			&i.VersionDatasetID,
			&i.VersionName,
			&i.VersionNamespaceID,
			&i.VersionUpdatedAt,
			&i.VersionCreatedAt,
			&i.NamespaceID,
			&i.NamespaceName,
			&i.NamespaceUpdatedAt,
			&i.NamespaceCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunEventsByRunID = `-- name: ListRunEventsByRunID :many
SELECT id, run_id, event_type, event_time, facets, created_at, updated_at FROM lineage.run_events
WHERE run_id = $1
ORDER BY created_at asc
`

func (q *Queries) ListRunEventsByRunID(ctx context.Context, runID int64) ([]LineageRunEvent, error) {
	rows, err := q.db.QueryContext(ctx, listRunEventsByRunID, runID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageRunEvent
	for rows.Next() {
		var i LineageRunEvent
		if err := rows.Scan(
			&i.ID,
			&i.RunID,
			&i.EventType,
			&i.EventTime,
			&i.Facets,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRuns = `-- name: ListRuns :many
select id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at from lineage.runs
order by job_version_id, id
`

func (q *Queries) ListRuns(ctx context.Context) ([]LineageRun, error) {
	rows, err := q.db.QueryContext(ctx, listRuns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageRun
	for rows.Next() {
		var i LineageRun
		if err := rows.Scan(
			&i.ID,
			&i.RunUuid,
			&i.JobVersionID,
			&i.ParentRunID,
			&i.LastEventType,
			&i.Facets,
			&i.StartedAt,
			&i.EndedAt,
			&i.NominalStartedAt,
			&i.NominalEndedAt,
			&i.ErrorMessage,
			&i.ProgrammingLanguage,
			&i.Stacktrace,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunsByJobVersionID = `-- name: ListRunsByJobVersionID :many
select id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at from lineage.runs
where job_version_id = $1
order by created_at desc
`

func (q *Queries) ListRunsByJobVersionID(ctx context.Context, jobVersionID int64) ([]LineageRun, error) {
	rows, err := q.db.QueryContext(ctx, listRunsByJobVersionID, jobVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LineageRun
	for rows.Next() {
		var i LineageRun
		if err := rows.Scan(
			&i.ID,
			&i.RunUuid,
			&i.JobVersionID,
			&i.ParentRunID,
			&i.LastEventType,
			&i.Facets,
			&i.StartedAt,
			&i.EndedAt,
			&i.NominalStartedAt,
			&i.NominalEndedAt,
			&i.ErrorMessage,
			&i.ProgrammingLanguage,
			&i.Stacktrace,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrentDatasetVersion = `-- name: UpdateCurrentDatasetVersion :one
update lineage.datasets set current_version_id = $1, updated_at = $2 
where id = $3
returning id, current_version_id, namespace_id, name, facets, created_at, updated_at
`

type UpdateCurrentDatasetVersionParams struct {
	CurrentVersionID sql.NullInt64
	UpdatedAt        sql.NullTime
	ID               int64
}

func (q *Queries) UpdateCurrentDatasetVersion(ctx context.Context, arg UpdateCurrentDatasetVersionParams) (LineageDataset, error) {
	row := q.db.QueryRowContext(ctx, updateCurrentDatasetVersion, arg.CurrentVersionID, arg.UpdatedAt, arg.ID)
	var i LineageDataset
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCurrentJobVersion = `-- name: UpdateCurrentJobVersion :one
update lineage.jobs set current_version_id = $1, updated_at = $2 
where id = $3
returning id, current_version_id, namespace_id, name, facets, created_at, updated_at
`

type UpdateCurrentJobVersionParams struct {
	CurrentVersionID sql.NullInt64
	UpdatedAt        sql.NullTime
	ID               int64
}

func (q *Queries) UpdateCurrentJobVersion(ctx context.Context, arg UpdateCurrentJobVersionParams) (LineageJob, error) {
	row := q.db.QueryRowContext(ctx, updateCurrentJobVersion, arg.CurrentVersionID, arg.UpdatedAt, arg.ID)
	var i LineageJob
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDataset = `-- name: UpdateDataset :one
update lineage.datasets set 
  facets = $1,
  updated_at = $2 
where id = $3
returning id, current_version_id, namespace_id, name, facets, created_at, updated_at
`

type UpdateDatasetParams struct {
	Facets    pqtype.NullRawMessage
	UpdatedAt sql.NullTime
	ID        int64
}

func (q *Queries) UpdateDataset(ctx context.Context, arg UpdateDatasetParams) (LineageDataset, error) {
	row := q.db.QueryRowContext(ctx, updateDataset, arg.Facets, arg.UpdatedAt, arg.ID)
	var i LineageDataset
	err := row.Scan(
		&i.ID,
		&i.CurrentVersionID,
		&i.NamespaceID,
		&i.Name,
		&i.Facets,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRun = `-- name: UpdateRun :one
UPDATE lineage.runs SET 
  facets = $2,
  last_event_type = $3,
  error_message = $4,
  programming_language = $5,
  stacktrace = $6,
  ended_at = $7,
  updated_at = $8
WHERE id = $1
RETURNING id, run_uuid, job_version_id, parent_run_id, last_event_type, facets, started_at, ended_at, nominal_started_at, nominal_ended_at, error_message, programming_language, stacktrace, created_at, updated_at
`

type UpdateRunParams struct {
	ID                  int64
	Facets              pqtype.NullRawMessage
	LastEventType       int32
	ErrorMessage        sql.NullString
	ProgrammingLanguage sql.NullString
	Stacktrace          sql.NullString
	EndedAt             sql.NullTime
	UpdatedAt           sql.NullTime
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) (LineageRun, error) {
	row := q.db.QueryRowContext(ctx, updateRun,
		arg.ID,
		arg.Facets,
		arg.LastEventType,
		arg.ErrorMessage,
		arg.ProgrammingLanguage,
		arg.Stacktrace,
		arg.EndedAt,
		arg.UpdatedAt,
	)
	var i LineageRun
	err := row.Scan(
		&i.ID,
		&i.RunUuid,
		&i.JobVersionID,
		&i.ParentRunID,
		&i.LastEventType,
		&i.Facets,
		&i.StartedAt,
		&i.EndedAt,
		&i.NominalStartedAt,
		&i.NominalEndedAt,
		&i.ErrorMessage,
		&i.ProgrammingLanguage,
		&i.Stacktrace,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
